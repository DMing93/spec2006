/* Include builtin types and operators */
#include <whirl2c.h>

/* Types */
struct iovec {
      void * iov_base;
      _UINT64 iov_len;
    };
    struct msghdr {
    void * msg_name;
    _UINT32 msg_namelen;
    struct iovec * msg_iov;
    _UINT64 msg_iovlen;
    void * msg_control;
    _UINT64 msg_controllen;
    _INT32 msg_flags;
  };
  struct cmsghdr {
    _UINT64 cmsg_len;
    _INT32 cmsg_level;
    _INT32 cmsg_type;
    _UINT8 * __cmsg_data;
  };
  struct timespec {
      _INT64 tv_sec;
      _INT64 tv_nsec;
    };
    struct stat_w2c_0 {
    _UINT64 st_dev;
    _UINT64 st_ino;
    _UINT64 st_nlink;
    _UINT32 st_mode;
    _UINT32 st_uid;
    _UINT32 st_gid;
    _INT32 pad0;
    _UINT64 st_rdev;
    _INT64 st_size;
    _INT64 st_blksize;
    _INT64 st_blocks;
    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
    _INT64 __unused[3LL];
  };
  struct __va_list_tag {
    _UINT32 gp_offset;
    _UINT32 fp_offset;
    void * overflow_arg_area;
    void * reg_save_area;
  };
  struct _IO_marker {
      struct _IO_marker * _next;
      struct _IO_FILE * _sbuf;
      _INT32 _pos;
    };
    struct _IO_FILE {
    _INT32 _flags;
    _INT8 * _IO_read_ptr;
    _INT8 * _IO_read_end;
    _INT8 * _IO_read_base;
    _INT8 * _IO_write_base;
    _INT8 * _IO_write_ptr;
    _INT8 * _IO_write_end;
    _INT8 * _IO_buf_base;
    _INT8 * _IO_buf_end;
    _INT8 * _IO_save_base;
    _INT8 * _IO_backup_base;
    _INT8 * _IO_save_end;
    struct _IO_marker * _markers;
    struct _IO_FILE * _chain;
    _INT32 _fileno;
    _INT32 _flags2;
    _INT64 _old_offset;
    _UINT16 _cur_column;
    _INT8 _vtable_offset;
    _INT8 _shortbuf[1LL];
    void * _lock;
    _INT64 _offset;
    void * __pad1;
    void * __pad2;
    void * __pad3;
    void * __pad4;
    _UINT64 __pad5;
    _INT32 _mode;
    _INT8 _unused2[20LL];
  };
  struct regnode {
                    _UINT8 flags;
                    _UINT8 type;
                    _UINT16 next_off;
                  };
                  struct reg_data;
                  struct reg_substr_data;
                  struct regexp {
                  _INT32 * startp;
                  _INT32 * endp;
                  struct regnode * regstclass;
                  struct reg_substr_data * substrs;
                  _INT8 * precomp;
                  struct reg_data * data;
                  _INT8 * subbeg;
                  _UINT32 * offsets;
                  _INT32 sublen;
                  _INT32 refcnt;
                  _INT32 minlen;
                  _INT32 prelen;
                  _UINT32 nparens;
                  _UINT32 lastparen;
                  _UINT32 lastcloseparen;
                  _UINT32 reganch;
                  struct regnode program[1LL];
                };
                struct op {
                  struct op * op_next;
                  struct op * op_sibling;
                  struct op * (*op_ppaddr)(void);
                  _UINT64 op_targ;
                  _UINT16 op_type;
                  _UINT16 op_seq;
                  _UINT8 op_flags;
                  _UINT8 op_private;
                };
                struct pmop {
                struct op * op_next;
                struct op * op_sibling;
                struct op * (*op_ppaddr)(void);
                _UINT64 op_targ;
                _UINT16 op_type;
                _UINT16 op_seq;
                _UINT8 op_flags;
                _UINT8 op_private;
                struct op * op_first;
                struct op * op_last;
                struct op * op_pmreplroot;
                struct op * op_pmreplstart;
                struct pmop * op_pmnext;
                struct regexp * op_pmregexp;
                _UINT32 op_pmflags;
                _UINT32 op_pmpermflags;
                _UINT8 op_pmdynflags;
                struct hv * op_pmstash;
              };
              struct sv {
                  void * sv_any;
                  _UINT32 sv_refcnt;
                  _UINT32 sv_flags;
                };
                struct hek {
                  _UINT32 hek_hash;
                  _INT32 hek_len;
                  _INT8 hek_key[1LL];
                };
                struct he {
                struct he * hent_next;
                struct hek * hent_hek;
                struct sv * hent_val;
              };
              struct interpreter {
                      _INT8 broiled;
                    };
                    struct xpvav {
                        _INT8 * xav_array;
                        _INT64 xav_fill;
                        _INT64 xav_max;
                        _INT64 xof_off;
                        _IEEE64 xnv_nv;
                        struct magic * xmg_magic;
                        struct hv * xmg_stash;
                        struct sv ** xav_alloc;
                        struct sv * xav_arylen;
                        _UINT8 xav_flags;
                      };
                      struct av {
                      struct xpvav * sv_any;
                      _UINT32 sv_refcnt;
                      _UINT32 sv_flags;
                    };
                    struct clone_params {
                    struct av * stashes;
                    _UINT64 flags;
                    struct interpreter * proto_perl;
                  };
                  struct mgvtbl {
                  _INT32(*svt_get)(struct sv *, struct magic *);
                  _INT32(*svt_set)(struct sv *, struct magic *);
                  _UINT32(*svt_len)(struct sv *, struct magic *);
                  _INT32(*svt_clear)(struct sv *, struct magic *);
                  _INT32(*svt_free)(struct sv *, struct magic *);
                  _INT32(*svt_copy)(struct sv *, struct magic *, struct sv *, const _INT8 *, _INT32);
                  _INT32(*svt_dup)(struct magic *, struct clone_params *);
                };
                struct magic {
                struct magic * mg_moremagic;
                struct mgvtbl * mg_virtual;
                _UINT16 mg_private;
                _INT8 mg_type;
                _UINT8 mg_flags;
                struct sv * mg_obj;
                _INT8 * mg_ptr;
                _INT32 mg_len;
              };
              struct xpvhv {
              _INT8 * xhv_array;
              _UINT64 xhv_fill;
              _UINT64 xhv_max;
              _INT64 xhv_keys;
              _IEEE64 xnv_nv;
              struct magic * xmg_magic;
              struct hv * xmg_stash;
              _INT32 xhv_riter;
              struct he * xhv_eiter;
              struct pmop * xhv_pmroot;
              _INT8 * xhv_name;
            };
            struct hv {
            struct xpvhv * sv_any;
            _UINT32 sv_refcnt;
            _UINT32 sv_flags;
          };
          union any {
                  void * any_ptr;
                  _INT32 any_i32;
                  _INT64 any_iv;
                  _INT64 any_long;
                  _INT8 any_bool;
                  void(*any_dptr)(void *);
                  void(*any_dxptr)(void *);
                };
                struct xpvcv {
                _INT8 * xpv_pv;
                _UINT64 xpv_cur;
                _UINT64 xpv_len;
                _INT64 xof_off;
                _IEEE64 xnv_nv;
                struct magic * xmg_magic;
                struct hv * xmg_stash;
                struct hv * xcv_stash;
                struct op * xcv_start;
                struct op * xcv_root;
                void(*xcv_xsub)(struct cv *);
                union any xcv_xsubany;
                struct gv * xcv_gv;
                _INT8 * xcv_file;
                _INT64 xcv_depth;
                struct av * xcv_padlist;
                struct cv * xcv_outside;
                _UINT16 xcv_flags;
                _UINT32 xcv_outside_seq;
              };
              struct cv {
              struct xpvcv * sv_any;
              _UINT32 sv_refcnt;
              _UINT32 sv_flags;
            };
            struct __dirstream;
                  union anonymous_w2c_15 {
                  struct __dirstream * xiou_dirp;
                  void * xiou_any;
                };
                struct _PerlIO;
                struct xpvio {
                _INT8 * xpv_pv;
                _UINT64 xpv_cur;
                _UINT64 xpv_len;
                _INT64 xiv_iv;
                _IEEE64 xnv_nv;
                struct magic * xmg_magic;
                struct hv * xmg_stash;
                struct _PerlIO ** xio_ifp;
                struct _PerlIO ** xio_ofp;
                union anonymous_w2c_15 xio_dirpu;
                _INT64 xio_lines;
                _INT64 xio_page;
                _INT64 xio_page_len;
                _INT64 xio_lines_left;
                _INT8 * xio_top_name;
                struct gv * xio_top_gv;
                _INT8 * xio_fmt_name;
                struct gv * xio_fmt_gv;
                _INT8 * xio_bottom_name;
                struct gv * xio_bottom_gv;
                _INT16 xio_subprocess;
                _INT8 xio_type;
                _INT8 xio_flags;
              };
              struct io {
              struct xpvio * sv_any;
              _UINT32 sv_refcnt;
              _UINT32 sv_flags;
            };
            struct gp {
            struct sv * gp_sv;
            _UINT32 gp_refcnt;
            struct io * gp_io;
            struct cv * gp_form;
            struct av * gp_av;
            struct hv * gp_hv;
            struct gv * gp_egv;
            struct cv * gp_cv;
            _UINT32 gp_cvgen;
            _UINT32 gp_flags;
            _UINT32 gp_line;
            _INT8 * gp_file;
          };
          struct xpvgv {
          _INT8 * xpv_pv;
          _UINT64 xpv_cur;
          _UINT64 xpv_len;
          _INT64 xiv_iv;
          _IEEE64 xnv_nv;
          struct magic * xmg_magic;
          struct hv * xmg_stash;
          struct gp * xgv_gp;
          _INT8 * xgv_name;
          _UINT64 xgv_namelen;
          struct hv * xgv_stash;
          _UINT8 xgv_flags;
        };
        struct gv {
        struct xpvgv * sv_any;
        _UINT32 sv_refcnt;
        _UINT32 sv_flags;
      };
      union anonymous_w2c_5 {
      _INT32 ival;
      _INT8 * pval;
      struct op * opval;
      struct gv * gvval;
    };
    struct ysv {
    _INT16 * yyss;
    union anonymous_w2c_5 * yyvs;
    _INT32 oldyydebug;
    _INT32 oldyynerrs;
    _INT32 oldyyerrflag;
    _INT32 oldyychar;
    union anonymous_w2c_5 oldyyval;
    union anonymous_w2c_5 oldyylval;
  };
  struct listop {
          struct op * op_next;
          struct op * op_sibling;
          struct op * (*op_ppaddr)(void);
          _UINT64 op_targ;
          _UINT16 op_type;
          _UINT16 op_seq;
          _UINT8 op_flags;
          _UINT8 op_private;
          struct op * op_first;
          struct op * op_last;
        };
        struct loop {
          struct op * op_next;
          struct op * op_sibling;
          struct op * (*op_ppaddr)(void);
          _UINT64 op_targ;
          _UINT16 op_type;
          _UINT16 op_seq;
          _UINT8 op_flags;
          _UINT8 op_private;
          struct op * op_first;
          struct op * op_last;
          struct op * op_redoop;
          struct op * op_nextop;
          struct op * op_lastop;
        };
        /* File-level vars and routines */
extern __inline _UINT32 gnu_dev_major(_UINT64);

extern __inline _UINT32 gnu_dev_minor(_UINT64);

extern __inline _UINT64 gnu_dev_makedev(_UINT32, _UINT32);

extern __inline _INT32 tolower(_INT32);

extern const _INT32 ** __ctype_tolower_loc(void);

extern __inline _INT32 toupper(_INT32);

extern const _INT32 ** __ctype_toupper_loc(void);

extern __inline _IEEE64 strtod(const _INT8 * restrict, _INT8 ** restrict);

extern _IEEE64 __strtod_internal(const _INT8 * restrict, _INT8 ** restrict, _INT32);

extern __inline _INT64 strtol(const _INT8 * restrict, _INT8 ** restrict, _INT32);

extern _INT64 __strtol_internal(const _INT8 * restrict, _INT8 ** restrict, _INT32, _INT32);

extern __inline _UINT64 strtoul(const _INT8 * restrict, _INT8 ** restrict, _INT32);

extern _UINT64 __strtoul_internal(const _INT8 * restrict, _INT8 ** restrict, _INT32, _INT32);

extern __inline _INT64 strtoq(const _INT8 * restrict, _INT8 ** restrict, _INT32);

extern _INT64 __strtoll_internal(const _INT8 * restrict, _INT8 ** restrict, _INT32, _INT32);

extern __inline _UINT64 strtouq(const _INT8 * restrict, _INT8 ** restrict, _INT32);

extern _UINT64 __strtoull_internal(const _INT8 * restrict, _INT8 ** restrict, _INT32, _INT32);

extern __inline _INT64 strtoll(const _INT8 * restrict, _INT8 ** restrict, _INT32);

extern __inline _UINT64 strtoull(const _INT8 * restrict, _INT8 ** restrict, _INT32);

extern __inline _IEEE64 atof(const _INT8 *);

extern __inline _INT32 atoi(const _INT8 *);

extern __inline _INT64 atol(const _INT8 *);

extern __inline _INT64 atoll(const _INT8 *);

extern __inline _UINT64 __strcspn_c1(const _INT8 *, _INT32);

extern __inline _UINT64 __strcspn_c2(const _INT8 *, _INT32, _INT32);

extern __inline _UINT64 __strcspn_c3(const _INT8 *, _INT32, _INT32, _INT32);

extern __inline _UINT64 __strspn_c1(const _INT8 *, _INT32);

extern __inline _UINT64 __strspn_c2(const _INT8 *, _INT32, _INT32);

extern __inline _UINT64 __strspn_c3(const _INT8 *, _INT32, _INT32, _INT32);

extern __inline _INT8 * __strpbrk_c2(const _INT8 *, _INT32, _INT32);

extern __inline _INT8 * __strpbrk_c3(const _INT8 *, _INT32, _INT32, _INT32);

extern __inline _INT8 * __strtok_r_1c(_INT8 *, _INT8, _INT8 **);

extern __inline _INT8 * __strsep_1c(_INT8 **, _INT8);

extern void * __rawmemchr(const void *, _INT32);

extern __inline _INT8 * __strsep_2c(_INT8 **, _INT8, _INT8);

extern __inline _INT8 * __strsep_3c(_INT8 **, _INT8, _INT8, _INT8);

extern __inline struct cmsghdr * __cmsg_nxthdr(struct msghdr *, struct cmsghdr *);

extern __inline _INT32 stat(const _INT8 *, struct stat_w2c_0 *);

extern _INT32 __xstat(_INT32, const _INT8 *, struct stat_w2c_0 *);

extern __inline _INT32 lstat(const _INT8 *, struct stat_w2c_0 *);

extern _INT32 __lxstat(_INT32, const _INT8 *, struct stat_w2c_0 *);

extern __inline _INT32 fstat(_INT32, struct stat_w2c_0 *);

extern _INT32 __fxstat(_INT32, _INT32, struct stat_w2c_0 *);

extern __inline _INT32 mknod(const _INT8 *, _UINT32, _UINT64);

extern _INT32 __xmknod(_INT32, const _INT8 *, _UINT32, _UINT64 *);

extern __inline _INT64 strtoimax(const _INT8 * restrict, _INT8 ** restrict, _INT32);

extern __inline _UINT64 strtoumax(const _INT8 * restrict, _INT8 ** restrict, _INT32);

extern __inline _INT64 wcstoimax(const _INT32 * restrict, _INT32 ** restrict, _INT32);

extern _INT64 __wcstol_internal(const _INT32 * restrict, _INT32 ** restrict, _INT32, _INT32);

extern __inline _UINT64 wcstoumax(const _INT32 * restrict, _INT32 ** restrict, _INT32);

extern _UINT64 __wcstoul_internal(const _INT32 * restrict, _INT32 ** restrict, _INT32, _INT32);

extern __inline _INT32 vprintf(const _INT8 * restrict, struct __va_list_tag *);

extern _INT32 vfprintf(struct _IO_FILE * restrict, const _INT8 * restrict, struct __va_list_tag *);

extern struct _IO_FILE * stdout;

extern __inline _INT32 getchar(void);

extern _INT32 _IO_getc(struct _IO_FILE *);

extern struct _IO_FILE * stdin;

extern __inline _INT32 fgetc_unlocked(struct _IO_FILE *);

extern _INT32 __uflow(struct _IO_FILE *);

extern __inline _INT32 getc_unlocked(struct _IO_FILE *);

extern __inline _INT32 getchar_unlocked(void);

extern __inline _INT32 putchar(_INT32);

extern _INT32 _IO_putc(_INT32, struct _IO_FILE *);

extern __inline _INT32 fputc_unlocked(_INT32, struct _IO_FILE *);

extern _INT32 __overflow(struct _IO_FILE *, _INT32);

extern __inline _INT32 putc_unlocked(_INT32, struct _IO_FILE *);

extern __inline _INT32 putchar_unlocked(_INT32);

extern __inline _INT32 feof_unlocked(struct _IO_FILE *);

extern __inline _INT32 ferror_unlocked(struct _IO_FILE *);

extern _INT32 Perl_yyparse(void);

extern void * Perl_safesysmalloc(_UINT64);

extern void Perl_save_destructor_x(void(*)(void *), void *);

static void yydestruct(void *);

extern _INT32 PL_yydebug;

extern _INT32 PL_yynerrs;

extern _INT32 PL_yyerrflag;

extern _INT32 PL_yychar;

extern union anonymous_w2c_5 PL_yyval;

extern union anonymous_w2c_5 PL_yylval;

static _INT16 yydefred[395LL] = {4, 0, 7, 0, 45, 58, 56, 0, 56, 56, 8, 46, 9, 11, 48, 0, 47, 49, 50, 0, 0, 0, 70, 71, 0, 14, 3, 173, 0, 0, 154, 0, 168, 0, 57, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 146, 148, 0, 0, 0, 0, 174, 140, 134, 135, 136, 137, 52, 0, 59, 0, 69, 0, 0, 7, 194, 197, 196, 195, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 85, 0, 192, 0, 129, 0, 0, 0, 0, 0, 0, 0, 179, 181, 180, 0, 188, 0, 0, 0, 0, 0, 0, 0, 0, 124, 0, 0, 0, 189, 190, 191, 193, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 51, 61, 0, 0, 0, 0, 83, 0, 0, 87, 0, 0, 0, 0, 0, 0, 0, 3, 167, 169, 0, 0, 0, 0, 0, 0, 0, 126, 0, 158, 178, 0, 0, 175, 0, 0, 123, 27, 0, 0, 19, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 0, 0, 90, 0, 0, 101, 0, 0, 0, 0, 0, 0, 0, 156, 0, 0, 0, 0, 0, 0, 2, 0, 0, 171, 0, 0, 0, 42, 0, 43, 0, 0, 0, 0, 187, 0, 0, 36, 41, 0, 0, 0, 170, 186, 86, 0, 130, 0, 132, 0, 125, 177, 65, 0, 0, 0, 0, 98, 0, 0, 0, 0, 100, 94, 0, 92, 0, 152, 0, 157, 63, 68, 67, 55, 0, 54, 84, 0, 88, 127, 0, 0, 0, 0, 0, 0, 0, 0, 80, 131, 133, 151, 0, 0, 0, 99, 93, 0, 97, 95, 153, 91, 72, 172, 6, 0, 0, 0, 0, 0, 0, 0, 0, 150, 96, 81, 7, 28, 29, 0, 0, 24, 25, 0, 32, 0, 0, 0, 22, 0, 0, 0, 31, 5, 0, 30, 0, 0, 33, 0, 23};

extern _INT32 Perl_yylex(void);

static _INT16 yysindex[395LL] = {0, 0, 0, -132, 0, 0, 0, -51, 0, 0, 0, 0, 0, 0, 0, 650, 0, 0, 0, -239, -215, 5, 0, 0, -215, 0, 0, 0, -31, -31, 0, -24, 0, 2181, 0, 0, 11, 16, 32, 46, -34, 2181, 49, 72, 76, 1017, 977, -31, 1081, 1348, -134, 2181, 85, -31, 2181, 2181, 2181, 2181, 2181, 2181, 1388, 1428, 0, 2181, 2181, -31, -31, -31, -31, -150, 0, 337, 849, -13, -58, -48, 0, 0, 8, 97, 92, 116, 0, 0, 0, 0, 0, 0, 0, 52, 0, -97, 0, -75, -97, 0, 0, 0, 0, 0, 2181, 146, 2181, 395, 52, -97, 0, 0, 0, 0, 0, 0, 150, 849, 153, 1468, 977, 0, 395, 0, -58, 116, 0, 2181, 0, 157, 0, 395, -8, 83, -52, 2181, 395, 1528, 0, 0, 0, -89, 0, 116, 107, 107, 107, -104, -104, 123, -37, 0, -73, 107, 107, 0, 0, 0, 0, 52, 0, 2181, 2181, 2181, 2181, 2181, 2181, 2181, 2181, 2181, 2181, 2181, 2181, 2181, 2181, 2181, 2181, 2181, 2181, 2181, 2181, 2181, 0, 0, -12, 2181, 1735, 2181, 2181, 2181, 2181, 2181, 2181, 1795, 0, 2181, 0, 0, -64, -32, -64, 411, 0, 2181, 291, 0, -64, 2181, 2181, 2181, 2181, 187, 1854, 0, 0, 0, -29, 58, 189, 2181, 116, 1914, 2029, 0, 111, 0, 0, -26, -19, 0, 2181, 165, 0, 0, -241, -241, 0, -241, -241, -241, -40, 0, 1618, 395, 1306, 185, 168, 849, 1235, 1129, 1169, 1268, 782, 235, 107, 107, 2181, 0, 2121, 2181, 0, 218, -46, 0, -3, -68, 61, 106, 65, 108, 68, 0, 17, 849, 26, -30, 2181, -30, 0, 236, 2181, 0, 2181, 52, -241, 0, 250, 0, 255, -241, 259, 260, 0, 248, 337, 0, 0, 262, 261, 2181, 0, 0, 0, 22, 0, 33, 0, 36, 0, 0, 0, 125, 2181, 2181, 71, 0, 50, 127, 2181, 182, 0, 0, 184, 0, 199, 0, 201, 0, 0, 0, 0, 0, 272, 0, 0, 354, 0, 0, 216, 216, 216, 216, 2181, 216, 2181, 301, 0, 0, 0, 0, 167, 2418, 228, 0, 0, 319, 0, 0, 0, 0, 0, 0, 0, -150, -150, -123, -123, 322, -150, 308, 216, 0, 0, 0, 0, 0, 0, 216, 334, 0, 0, 216, 0, 1854, -150, 449, 0, 2181, -150, 340, 0, 0, 355, 0, 216, 216, 0, -123, 0};

static _INT16 yycheck[4569LL] = {15, 95, 36, 46, 41, 36, 40, 59, 59, 100, 208, 54, 41, 59, 199, 41, 40, 196, 257, 41, 93, 123, 44, 202, 36, 93, 59, 40, 40, 59, 29, 59, 40, 91, 49, 41, 58, 59, 41, 362, 131, 63, 257, 91, 41, 60, 61, 46, 47, 59, 94, 40, 15, 59, 53, 41, 40, 100, 41, 300, 301, 105, 59, 41, 59, 123, 65, 66, 67, 68, 393, 93, 40, 59, 41, 123, 41, 41, 91, 91, 123, 41, 45, 91, 44, 48, 40, 93, 131, 40, 123, 41, 123, 123, 59, 123, 41, 295, 58, 59, 115, 116, 44, 63, 106, 107, 108, 109, 110, 111, 123, 123, 40, 123, 59, 123, 40, 116, 133, 0, 59, 36, 37, 257, 59, 40, 89, 59, 278, 314, 59, 123, 41, 93, 266, 267, 268, 40, 270, 271, 338, 104, 157, 158, 159, 160, 161, 162, 163, 64, 59, 59, 33, 276, 277, 36, 37, 38, 41, 40, 44, 42, 43, 260, 45, 297, 181, 182, 183, 184, 185, 186, 187, 188, 189, 123, 59, 41, 59, 0, 41, 272, 257, 64, 199, 383, 40, 278, 203, 204, 40, 206, 155, 208, 41, 59, 298, 40, 59, 93, 215, 93, 217, 218, 8, 9, 257, 209, 125, 298, 91, 226, 33, 317, 91, 36, 37, 38, 93, 40, 93, 42, 43, 36, 45, 257, 257, 300, 301, 272, 41, 262, 300, 301, 298, 278, 125, 252, 59, 254, 255, 260, 123, 64, 125, 126, 258, 0, 300, 301, 272, 273, 274, 275, 300, 301, 91, 279, 40, 281, 93, 301, 296, 300, 301, 298, 272, 273, 274, 275, 91, 300, 301, 279, 300, 301, 370, 41, 300, 301, 33, 303, 304, 36, 37, 38, 260, 40, 40, 42, 43, 41, 45, 308, 300, 301, 41, 300, 301, 314, 41, 41, 123, 41, 125, 126, 59, 125, 271, 125, 273, 64, 272, 273, 274, 275, 279, 300, 301, 279, 59, 281, 300, 301, 125, 340, 125, 287, 288, 289, 290, 59, 41, 300, 301, 44, 300, 301, 91, 123, 300, 301, 41, 303, 304, 305, 306, 307, 308, 309, 300, 301, 312, 125, 63, 315, 316, 317, 300, 301, 41, 300, 301, 41, 379, 300, 301, 59, 300, 301, 123, 300, 301, 126, 40, 256, 257, 258, 259, 260, 261, 41, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 41, 41, 123, 279, 280, 41, 282, 283, 284, 285, 286, 300, 301, 300, 301, 291, 292, 293, 294, 295, 296, 297, 63, 123, 312, 41, 302, 315, 316, 317, 300, 301, 300, 301, 59, 311, 41, 313, 314, 59, 256, 257, 258, 259, 260, 261, 41, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 59, 41, 289, 279, 280, 35, 282, 283, 284, 285, 286, 52, 300, 301, 52, 291, 292, 293, 294, 295, 296, 297, 309, 15, 158, 312, 302, 379, 315, 316, 317, 206, 340, 24, -1, 311, -1, 313, 314, 309, 273, 41, 312, -1, 44, 315, 316, 317, 256, 257, 258, 259, 260, 261, -1, 263, 264, 265, 58, 59, -1, 269, -1, 63, 272, 273, 274, 275, -1, 289, 290, 279, 280, -1, 282, 283, 284, 285, 286, -1, -1, 125, -1, 291, 292, 293, 294, 295, 296, 309, -1, -1, 312, 93, 302, 315, 316, 317, -1, -1, -1, -1, -1, 311, 33, 313, 314, 36, 37, 38, -1, 40, 41, 42, 43, 44, 45, 281, -1, 125, -1, -1, -1, 287, 288, 289, 290, -1, -1, 58, 59, -1, -1, -1, 63, 64, -1, -1, -1, 303, 304, 305, 306, 307, 308, 309, -1, -1, 312, -1, -1, 315, 316, 317, 272, 273, 274, 275, -1, -1, -1, 279, 91, -1, 93, 33, -1, -1, 36, 37, 38, -1, 40, 41, 42, 43, 44, 45, -1, -1, 281, -1, 300, 301, -1, -1, 287, 288, 289, 290, 58, 59, -1, -1, -1, 63, 64, 126, -1, -1, -1, -1, 303, 304, 305, 306, 307, 308, 309, -1, -1, 312, -1, -1, 315, 316, 317, -1, -1, -1, -1, -1, 266, 267, 268, 93, 270, 271, 33, 289, 290, 36, 37, 38, -1, 40, -1, 42, 43, -1, 45, -1, 359, 360, -1, -1, -1, 364, 308, 309, -1, -1, 312, 297, 59, 315, 316, 317, 126, 64, 266, 267, 268, 380, 270, 271, -1, 384, -1, -1, -1, -1, 272, 273, 274, 275, -1, -1, -1, 279, -1, 281, -1, -1, -1, -1, 91, 287, 288, 289, 290, 297, -1, -1, -1, -1, -1, -1, -1, -1, 300, 301, -1, 303, 304, 305, 306, 307, 308, 309, -1, -1, 312, -1, -1, 315, 316, 317, 123, -1, -1, 126, -1, -1, -1, -1, -1, -1, 257, 258, 259, 260, 261, -1, 263, 264, 265, -1, -1, -1, 269, -1, -1, 272, 273, 274, 275, -1, -1, -1, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, -1, -1, -1, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, -1, 311, 312, 313, 314, 315, 316, 317, 257, 258, 259, 260, 261, -1, 263, 264, 265, -1, -1, -1, 269, -1, -1, 272, 273, 274, 275, -1, -1, -1, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, -1, -1, -1, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, -1, 311, 312, 313, 314, 315, 316, 317, -1, 256, 257, 258, 259, 260, 261, 63, 263, 264, 265, -1, -1, -1, 269, -1, -1, 272, 273, 274, 275, -1, -1, -1, 279, 280, -1, 282, 283, 284, 285, 286, -1, -1, -1, -1, 291, 292, 293, 294, 295, 296, -1, -1, -1, 33, -1, 302, 36, 37, 38, -1, 40, -1, 42, 43, 311, 45, 313, 314, -1, -1, -1, -1, 335, 336, 337, -1, 339, -1, -1, 59, -1, -1, -1, -1, 64, -1, -1, 41, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 366, 58, 59, -1, -1, -1, -1, 373, 91, -1, 33, 377, -1, 36, 37, 38, -1, 40, -1, 42, 43, -1, 45, -1, 390, 391, -1, 28, 29, -1, -1, -1, -1, -1, -1, -1, 93, -1, -1, 40, 123, 64, -1, 126, -1, 46, 47, 48, -1, -1, 33, 52, 53, 36, 37, 38, -1, 40, -1, 42, 43, -1, 45, -1, 65, 66, 67, 68, 91, 287, 288, 289, 290, -1, -1, -1, -1, -1, -1, -1, -1, 64, -1, -1, -1, -1, -1, -1, -1, 41, 308, 309, 44, -1, 312, -1, -1, 315, 316, 317, 123, -1, -1, 126, -1, -1, 58, 59, 91, -1, -1, 63, -1, -1, 33, 116, -1, 36, 37, 38, -1, 40, -1, 42, 43, -1, 45, -1, -1, -1, 281, -1, -1, -1, -1, -1, 287, 288, 289, 290, 123, 93, -1, 126, -1, 64, -1, -1, -1, -1, -1, -1, 303, 304, 305, 306, 307, 308, 309, -1, -1, 312, -1, -1, 315, 316, 317, -1, -1, -1, -1, -1, 91, 256, 257, 258, 259, 260, 261, 180, 263, 264, 265, -1, -1, -1, 269, -1, -1, 272, 273, 274, 275, -1, -1, -1, 279, 280, -1, 282, 283, 284, 285, 286, 123, -1, 207, 126, 291, 292, 293, 294, 295, 296, -1, 272, 273, 274, 275, 302, -1, -1, 279, -1, -1, -1, -1, -1, 311, -1, 313, 314, -1, -1, 257, 258, 259, 260, 261, 262, 263, 264, 265, 300, 301, -1, 269, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 280, -1, 282, 283, 284, 285, 286, -1, -1, -1, -1, 291, 292, 293, 294, 295, 296, 257, 258, 259, 260, 261, 302, 263, 264, 265, -1, -1, -1, 269, -1, 311, -1, 313, 314, -1, 58, -1, -1, -1, 280, 63, 282, 283, 284, 285, 286, -1, -1, -1, -1, 291, 292, 293, 294, 295, 296, -1, -1, -1, -1, -1, 302, 272, 273, 274, 275, -1, -1, -1, 279, 311, 281, 313, 314, -1, -1, -1, 287, 288, -1, 257, 258, 259, 260, 261, -1, 263, 264, 265, -1, 300, 301, 269, 303, 304, 305, 306, 307, 308, -1, -1, -1, -1, 280, -1, 282, 283, 284, 285, 286, -1, -1, -1, -1, 291, 292, 293, 294, 295, 296, -1, -1, -1, 33, -1, 302, 36, 37, 38, -1, 40, -1, 42, 43, 311, 45, 313, 314, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, -1, -1, -1, -1, 64, -1, -1, -1, 287, 288, 289, 290, -1, 33, -1, -1, 36, 37, 38, -1, 40, 41, 42, 43, -1, 45, 305, 306, 307, 308, 309, 91, -1, 312, -1, -1, 315, 316, 317, -1, -1, -1, -1, -1, 64, -1, -1, -1, 287, 288, 289, 290, -1, 33, -1, -1, 36, 37, 38, -1, 40, -1, 42, 43, -1, 45, 126, 306, 307, 308, 309, 91, -1, 312, -1, -1, 315, 316, 317, -1, -1, -1, -1, -1, 64, -1, -1, -1, -1, -1, -1, -1, -1, 33, -1, -1, 36, 37, 38, -1, 40, 41, 42, 43, -1, 45, 126, -1, 281, -1, -1, 91, -1, 93, 287, 288, 289, 290, -1, -1, -1, -1, -1, -1, 64, -1, -1, -1, -1, -1, 303, 304, 305, 306, 307, 308, 309, -1, -1, 312, -1, -1, 315, 316, 317, -1, 126, 287, 288, 289, 290, 91, -1, 33, -1, -1, 36, 37, 38, -1, 40, 41, 42, 43, -1, 45, -1, 307, 308, 309, -1, -1, 312, -1, -1, 315, 316, 317, -1, -1, -1, -1, -1, -1, 64, 287, 126, 289, 290, -1, -1, -1, -1, -1, -1, -1, -1, 257, 258, 259, 260, 261, -1, 263, 264, 265, 308, 309, -1, 269, 312, 91, -1, 315, 316, 317, -1, -1, -1, -1, 280, -1, 282, 283, 284, 285, 286, -1, -1, -1, -1, 291, 292, 293, 294, 295, 296, 257, 258, 259, 260, 261, 302, 263, 264, 265, 126, -1, -1, 269, -1, 311, -1, 313, 314, -1, -1, -1, -1, -1, 280, -1, 282, 283, 284, 285, 286, -1, -1, -1, -1, 291, 292, 293, 294, 295, 296, 257, 258, 259, 260, 261, 302, 263, 264, 265, -1, -1, -1, 269, -1, 311, -1, 313, 314, -1, -1, -1, -1, -1, 280, -1, 282, 283, 284, 285, 286, -1, -1, -1, -1, 291, 292, 293, 294, 295, 296, 257, 258, 259, 260, 261, 302, 263, 264, 265, -1, -1, -1, 269, -1, 311, -1, 313, 314, -1, -1, -1, -1, -1, 280, -1, 282, 283, 284, 285, 286, -1, -1, -1, -1, 291, 292, 293, 294, 295, 296, -1, -1, -1, 33, -1, 302, 36, 37, 38, -1, 40, 41, 42, 43, 311, 45, 313, 314, -1, -1, 257, 258, 259, 260, 261, -1, 263, 264, 265, -1, -1, -1, 269, -1, 64, -1, -1, -1, -1, -1, -1, -1, -1, 280, -1, 282, 283, 284, 285, 286, -1, -1, -1, -1, 291, 292, 293, 294, 295, 296, -1, 91, -1, 33, -1, 302, 36, 37, 38, -1, 40, 41, 42, 43, 311, 45, 313, 314, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, -1, 126, -1, -1, -1, -1, -1, 41, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 59, 91, 33, -1, 63, 36, 37, 38, -1, 40, -1, 42, 43, -1, 45, -1, -1, -1, -1, -1, 287, 288, 289, 290, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, 93, -1, 126, 304, 305, 306, 307, 308, 309, -1, -1, 312, -1, -1, 315, 316, 317, -1, -1, -1, -1, -1, -1, -1, -1, -1, 91, -1, 33, -1, -1, 36, 37, 38, -1, 40, 41, 42, 43, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, -1, 126, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 257, 258, 259, 260, 261, -1, 263, 264, 265, -1, -1, -1, 269, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, 280, -1, 282, 283, 284, 285, 286, -1, -1, -1, -1, 291, 292, 293, 294, 295, 296, 41, -1, -1, 44, -1, 302, -1, -1, 126, -1, -1, -1, -1, -1, 311, -1, 313, 314, 59, -1, 257, 258, 259, 260, 261, -1, 263, 264, 265, -1, 33, -1, 269, 36, 37, 38, -1, 40, 41, 42, 43, -1, 45, 280, -1, 282, 283, 284, 285, 286, -1, -1, 93, -1, 291, 292, 293, 294, 295, 296, -1, 64, -1, -1, -1, 302, 272, 273, 274, 275, -1, -1, -1, 279, 311, 281, 313, 314, 256, 257, 258, 259, 260, 261, -1, 263, 264, 265, 91, -1, -1, 269, -1, -1, 300, 301, -1, 303, 304, 305, 306, 307, 280, -1, 282, 283, 284, 285, 286, -1, -1, -1, -1, 291, 292, 293, 294, 295, 296, -1, -1, -1, 33, 126, 302, 36, 37, 38, -1, 40, 41, 42, 43, 311, 45, 313, 314, -1, -1, 257, 258, 259, 260, 261, -1, 263, 264, 265, -1, -1, -1, 269, -1, 64, -1, -1, -1, -1, -1, -1, -1, -1, 280, -1, 282, 283, 284, 285, 286, -1, -1, -1, -1, 291, 292, 293, 294, 295, 296, -1, 91, -1, 33, -1, 302, 36, 37, 38, -1, 40, -1, 42, 43, 311, 45, 313, 314, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, -1, 126, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 272, 273, 274, 275, -1, -1, -1, 279, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 257, 258, 259, 260, 261, 300, 263, 264, 265, -1, -1, -1, 269, -1, -1, -1, -1, -1, -1, -1, -1, 126, -1, 280, -1, 282, 283, 284, 285, 286, -1, 41, -1, -1, 291, 292, 293, 294, 295, 296, -1, -1, -1, -1, -1, 302, -1, -1, 58, 59, -1, -1, -1, 63, 311, -1, 313, 314, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 93, -1, -1, -1, -1, -1, -1, -1, -1, 257, 258, 259, 260, 261, -1, 263, 264, 265, -1, -1, -1, 269, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 280, -1, 282, 283, 284, 285, 286, 41, -1, -1, 44, 291, 292, 293, 294, 295, 296, -1, -1, -1, -1, -1, 302, -1, 58, 59, -1, -1, -1, 63, -1, 311, -1, 313, 314, -1, -1, 257, 258, 259, 260, 261, -1, 263, 264, 265, -1, -1, -1, 269, -1, -1, -1, -1, -1, -1, -1, -1, -1, 93, 280, -1, 282, 283, 284, 285, 286, -1, -1, -1, -1, 291, 292, 293, 294, 295, 296, 33, -1, -1, 63, -1, 302, -1, -1, 41, -1, -1, -1, 45, -1, 311, 48, 313, 314, 51, -1, -1, -1, 55, 56, 57, 58, 59, -1, -1, -1, 63, 64, 41, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 59, -1, -1, -1, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 102, 272, 273, 274, 275, -1, -1, -1, 279, 41, 281, -1, 44, -1, -1, 93, 287, 288, 289, 290, -1, -1, -1, -1, -1, -1, 58, 59, -1, 300, 301, 63, 303, 304, 305, 306, 307, 308, 309, -1, -1, 312, -1, -1, 315, 316, 317, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 93, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 191, -1, -1, 272, 273, 274, 275, -1, 41, -1, 279, 44, 281, -1, -1, -1, -1, -1, 287, 288, 289, 290, -1, -1, -1, 58, 59, -1, -1, -1, 63, 300, 301, -1, 303, 304, 305, 306, 307, 308, 309, -1, -1, 312, -1, -1, 315, 316, 317, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, 93, 44, -1, 281, -1, -1, -1, -1, -1, 287, 288, 289, 290, -1, -1, 58, 59, -1, -1, -1, 63, -1, -1, -1, -1, 276, 304, 305, 306, 307, 308, 309, -1, -1, 312, -1, -1, 315, 316, 317, -1, -1, -1, -1, -1, 272, 273, 274, 275, -1, 93, -1, 279, 41, 281, -1, 44, -1, 309, -1, 287, 288, 289, 290, -1, -1, -1, -1, -1, -1, 58, 59, -1, 300, 301, 63, 303, 304, 305, 306, 307, 308, 309, -1, -1, 312, -1, -1, 315, 316, 317, 272, 273, 274, 275, -1, -1, -1, 279, 41, 281, -1, 44, -1, -1, 93, 287, 288, 289, 290, -1, -1, -1, -1, -1, -1, 58, 59, -1, 300, 301, 63, 303, 304, 305, 306, 307, 308, 309, -1, -1, 312, -1, -1, 315, 316, 317, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, 44, -1, 93, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 59, -1, -1, -1, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 272, 273, 274, 275, -1, -1, -1, 279, -1, 281, -1, -1, -1, -1, -1, 287, 288, 289, 290, 93, -1, -1, -1, -1, 41, -1, -1, 44, 300, 301, -1, 303, 304, 305, 306, 307, 308, 309, -1, -1, 312, 58, 59, 315, 316, 317, 63, -1, -1, -1, 272, 273, 274, 275, -1, -1, -1, 279, -1, 281, -1, -1, -1, -1, -1, 287, 288, 289, 290, -1, -1, -1, -1, -1, 41, -1, 93, 44, 300, 301, -1, 303, 304, 305, 306, 307, 308, 309, -1, -1, 312, 58, 59, 315, 316, 317, 63, -1, -1, -1, -1, -1, -1, -1, -1, 272, 273, 274, 275, -1, -1, -1, 279, -1, 281, -1, -1, -1, -1, -1, 287, 288, 289, 290, -1, -1, 93, -1, -1, -1, -1, -1, -1, 300, 301, -1, 303, 304, 305, 306, 307, 308, 309, -1, -1, 312, -1, -1, 315, 316, 317, 272, 273, 274, 275, -1, 41, -1, 279, 44, 281, -1, -1, -1, -1, -1, 287, 288, 289, 290, -1, -1, -1, 58, 59, -1, -1, -1, 63, 300, 301, -1, 303, 304, 305, 306, 307, 308, 309, -1, -1, 312, -1, -1, 315, 316, 317, -1, 272, 273, 274, 275, -1, -1, -1, 279, -1, 281, 93, -1, -1, -1, -1, 287, 288, 289, 290, -1, -1, -1, -1, -1, 41, -1, -1, 44, 300, 301, -1, 303, 304, 305, 306, 307, 308, 309, -1, -1, 312, 58, 59, 315, 316, 317, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 272, 273, 274, 275, -1, -1, -1, 279, -1, 281, -1, -1, -1, -1, -1, 287, 288, 289, 290, 93, -1, -1, -1, -1, 41, -1, -1, 44, 300, 301, -1, 303, 304, 305, 306, 307, 308, 309, -1, -1, 312, 58, 59, 315, 316, 317, 63, -1, -1, -1, 272, 273, 274, 275, -1, -1, -1, 279, -1, 281, -1, -1, -1, -1, -1, 287, 288, 289, 290, -1, -1, -1, -1, -1, 41, -1, 93, 44, 300, 301, -1, 303, 304, 305, 306, 307, 308, 309, -1, -1, 312, 58, 59, 315, 316, 317, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 93, 41, -1, -1, 44, -1, 272, 273, 274, 275, 41, -1, -1, 279, -1, 281, -1, -1, 58, 59, -1, 287, 288, 289, 290, -1, -1, 58, 59, -1, -1, -1, 63, -1, 300, 301, -1, 303, 304, 305, 306, 307, 308, 309, -1, -1, 312, -1, -1, 315, 316, 317, -1, 93, -1, -1, -1, -1, -1, -1, -1, -1, 93, -1, -1, -1, -1, -1, 41, -1, -1, 44, 272, 273, 274, 275, 41, -1, -1, 279, -1, 281, -1, -1, -1, 58, 59, 287, 288, 289, 290, -1, -1, 58, 59, -1, -1, -1, 63, -1, 300, 301, -1, 303, 304, 305, 306, 307, 308, 309, -1, -1, 312, -1, -1, 315, 316, 317, -1, -1, 93, -1, -1, -1, -1, -1, -1, -1, 93, 272, 273, 274, 275, -1, -1, -1, 279, 41, 281, -1, 44, -1, -1, -1, 287, 288, 289, 290, -1, -1, -1, -1, -1, -1, 58, 59, -1, 300, 301, 63, 303, 304, 305, 306, 307, 308, 309, -1, -1, 312, -1, -1, 315, 316, 317, -1, -1, -1, -1, 272, 273, 274, 275, -1, 41, -1, 279, 44, 281, 93, -1, -1, -1, -1, 287, 288, 289, 290, -1, -1, -1, 58, 59, -1, -1, -1, 63, 300, 301, -1, 303, 304, 305, 306, 307, 308, 309, -1, -1, 312, -1, -1, 315, 316, 317, -1, -1, -1, -1, -1, -1, -1, 272, 273, 274, 275, 93, -1, -1, 279, -1, 272, 273, 274, 275, -1, 41, -1, 279, 44, 281, -1, -1, -1, -1, -1, 287, 288, 289, 290, 300, 301, -1, 58, 59, -1, -1, -1, 63, 300, 301, -1, 303, 304, 305, 306, 307, 308, 309, -1, -1, 312, -1, -1, 315, 316, 317, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 93, 272, 273, 274, 275, -1, -1, -1, 279, 272, 273, 274, 275, -1, 41, -1, 279, 44, 281, -1, -1, -1, -1, -1, 287, 288, 289, 290, -1, 300, 301, 58, 59, -1, -1, -1, 63, 300, 301, -1, 303, 304, 305, 306, 307, 308, 309, -1, -1, 312, -1, -1, 315, 316, 317, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 93, -1, -1, -1, 272, 273, 274, 275, -1, 41, -1, 279, 44, 281, -1, -1, -1, -1, -1, 287, 288, 289, 290, -1, -1, -1, 58, 59, -1, -1, -1, 63, 300, 301, -1, 303, 304, 305, 306, 307, 308, 309, -1, -1, 312, -1, -1, -1, -1, -1, -1, 272, 273, 274, 275, -1, 41, -1, 279, 44, 281, 93, -1, -1, -1, -1, 287, 288, 289, 290, -1, -1, -1, 58, 59, -1, -1, -1, 63, 300, 301, -1, 303, 304, 305, 306, 307, 308, 309, -1, -1, 312, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, 44, -1, -1, -1, 93, -1, -1, -1, -1, 272, 273, 274, 275, -1, 58, 59, 279, -1, 281, 63, -1, -1, -1, -1, 287, 288, 289, 290, -1, -1, -1, -1, -1, -1, -1, -1, 41, 300, 301, 44, 303, 304, 305, 306, 307, 308, 309, -1, -1, 93, -1, -1, -1, 58, 59, -1, -1, -1, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 272, 273, 274, 275, -1, 41, -1, 279, 44, 281, -1, -1, -1, 93, -1, 287, 288, 289, 290, -1, -1, -1, 58, 59, -1, -1, -1, 63, 300, 301, -1, 303, 304, 305, 306, 307, 308, 309, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, 44, -1, -1, -1, -1, 93, -1, -1, -1, 272, 273, 274, 275, -1, 58, 59, 279, -1, 281, 63, -1, -1, -1, -1, 287, 288, 289, 290, -1, -1, -1, -1, -1, -1, -1, -1, -1, 300, 301, -1, 303, 304, 305, 306, 307, 308, 309, -1, -1, 93, -1, -1, -1, -1, -1, -1, 272, 273, 274, 275, -1, 41, -1, 279, 44, 281, -1, -1, -1, -1, -1, 287, 288, 289, 290, -1, -1, -1, 58, 59, -1, -1, -1, 63, 300, 301, -1, 303, 304, 305, 306, 307, 308, 309, -1, -1, -1, -1, -1, -1, -1, 272, 273, 274, 275, -1, -1, -1, 279, 41, 281, -1, 44, 93, -1, -1, 287, 288, 289, 290, -1, -1, -1, -1, -1, -1, 58, 59, -1, 300, 301, 63, 303, 304, 305, 306, 307, 308, 309, -1, 272, 273, 274, 275, -1, 41, -1, 279, 44, 281, -1, -1, -1, -1, -1, 287, 288, 289, 290, -1, -1, 93, 58, 59, -1, -1, -1, 63, 300, 301, -1, 303, 304, 305, 306, 307, 308, 309, -1, -1, -1, -1, -1, -1, 272, 273, 274, 275, -1, 41, -1, 279, 44, 281, -1, -1, -1, 93, -1, 287, 288, 289, 290, -1, -1, -1, 58, 59, -1, -1, -1, 63, 300, 301, -1, 303, 304, 305, 306, 307, 308, 309, -1, -1, -1, -1, -1, -1, 272, 273, 274, 275, -1, 41, -1, 279, 44, 281, -1, -1, -1, 93, -1, 287, 288, 289, 290, -1, -1, -1, 58, 59, -1, -1, -1, 63, 300, 301, -1, 303, 304, 305, 306, 307, 308, -1, -1, -1, -1, -1, 41, -1, -1, 44, -1, -1, -1, -1, -1, -1, 41, -1, -1, 44, -1, 93, -1, 58, 59, -1, -1, -1, 272, 273, 274, 275, -1, 58, 59, 279, -1, 281, 63, -1, -1, -1, -1, 287, 288, -1, 290, -1, -1, -1, -1, -1, -1, -1, -1, -1, 300, 301, 93, 303, 304, 305, 306, 307, 308, -1, -1, -1, 93, -1, -1, 41, -1, -1, 44, -1, 272, 273, 274, 275, -1, 41, -1, 279, 44, 281, -1, -1, 58, 59, -1, 287, 288, 63, -1, -1, -1, -1, 58, 59, -1, -1, -1, 63, 300, 301, -1, 303, 304, 305, 306, 307, 272, 273, 274, 275, -1, 41, -1, 279, 44, 281, -1, 93, -1, -1, -1, 287, 288, -1, -1, -1, -1, 93, 58, 59, -1, -1, -1, 63, 300, 301, -1, 303, 304, 305, 306, 307, -1, -1, -1, -1, -1, -1, -1, -1, 272, 273, 274, 275, -1, 41, -1, 279, 44, 281, -1, -1, -1, 93, -1, 287, 288, -1, -1, -1, -1, -1, 58, 59, -1, -1, -1, 63, 300, 301, -1, 303, 304, 305, 306, 307, -1, 41, -1, -1, 44, -1, -1, -1, 272, 273, 274, 275, -1, -1, -1, 279, -1, 281, 58, 59, -1, 93, -1, 287, 288, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 300, 301, -1, 303, 304, 305, 306, 307, -1, 272, 273, 274, 275, -1, -1, -1, 279, 93, -1, 272, 273, 274, 275, -1, -1, -1, 279, -1, 281, -1, -1, -1, -1, -1, -1, 288, -1, 300, 301, -1, 303, -1, -1, -1, -1, -1, -1, 300, 301, -1, 303, 304, 305, 306, 307, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 272, 273, 274, 275, -1, -1, -1, 279, -1, 281, 272, 273, 274, 275, -1, -1, -1, 279, -1, 281, -1, -1, -1, -1, -1, -1, -1, -1, 300, 301, -1, 303, 304, 305, 306, 307, -1, -1, 300, 301, -1, 303, 304, 305, 306, -1, 272, 273, 274, 275, -1, -1, -1, 279, -1, 281, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 300, 301, -1, 303, 304, 305, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 272, 273, 274, 275, -1, -1, -1, 279, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 300, 301, -1, 303, 272, 273, 274, 275, -1, -1, -1, 279, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 300, 301};

extern void * Perl_safesysrealloc(void *, _UINT64);

static _INT16 yytable[4569LL] = {71, 197, 65, 121, 227, 65, 111, 220, 22, 198, 293, 139, 296, 315, 275, 305, 102, 273, 88, 113, 228, 60, 113, 279, 65, 317, 60, 182, 254, 325, 101, 62, 218, 185, 130, 75, 113, 113, 316, 376, 221, 113, 90, 187, 15, 146, 148, 123, 124, 64, 196, 106, 69, 75, 138, 18, 107, 121, 323, 162, 163, 202, 15, 342, 92, 184, 151, 152, 153, 154, 394, 113, 108, 18, 343, 186, 39, 344, 183, 255, 216, 159, 117, 185, 159, 126, 109, 75, 121, 114, 60, 349, 26, 26, 39, 62, 16, 341, 159, 159, 212, 213, 297, 159, 203, 204, 205, 206, 207, 208, 181, 252, 115, 64, 16, 184, 116, 215, 223, 26, 318, 65, 67, 131, 320, 133, 192, 322, 155, 351, 348, 188, 17, 159, 4, 5, 6, 189, 7, 8, 363, 201, 230, 231, 233, 234, 235, 236, 237, 66, 17, 190, 26, 373, 374, 26, 26, 26, 20, 26, 191, 26, 26, 193, 26, 9, 258, 260, 261, 262, 263, 264, 265, 266, 268, 26, 20, 38, 26, 21, 40, 328, 195, 26, 213, 388, 199, 332, 280, 231, 209, 231, 229, 290, 210, 38, 60, 217, 15, 319, 299, 321, 301, 303, 23, 24, 21, 295, 219, 224, 26, 307, 21, 180, 226, 21, 21, 21, 345, 21, 350, 21, 21, 65, 21, 272, 96, 162, 163, 121, 298, 97, 162, 163, 270, 121, 304, 310, 21, 312, 313, 306, 26, 21, 26, 26, 253, 1, 162, 163, 113, 113, 113, 113, 162, 163, 308, 113, 314, 113, 367, 163, 110, 162, 163, 60, 75, 75, 75, 75, 21, 162, 163, 75, 162, 163, 381, 330, 113, 113, 44, 113, 113, 44, 44, 44, 324, 44, 338, 44, 44, 334, 44, 346, 75, 75, 335, 162, 163, 213, 336, 337, 21, 339, 21, 21, 44, 352, 326, 353, 326, 44, 159, 159, 159, 159, 333, 162, 163, 159, 340, 159, 162, 163, 354, 280, 355, 159, 159, 159, 159, 356, 277, 162, 163, 276, 162, 163, 44, 358, 159, 159, 366, 159, 159, 159, 159, 159, 159, 159, 162, 163, 159, 368, 170, 159, 159, 159, 162, 163, 369, 162, 163, 377, 71, 162, 163, 379, 162, 163, 44, 162, 163, 44, 383, 26, 26, 26, 26, 26, 26, 390, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 357, 391, 53, 26, 26, 184, 26, 26, 26, 26, 26, 162, 163, 162, 163, 26, 26, 26, 26, 26, 26, 26, 170, 62, 177, 37, 26, 178, 179, 180, 162, 163, 162, 163, 35, 26, 185, 26, 26, 182, 21, 21, 21, 21, 21, 21, 40, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 37, 35, 167, 21, 21, 105, 21, 21, 21, 21, 21, 135, 162, 163, 136, 21, 21, 21, 21, 21, 21, 21, 176, 80, 232, 177, 21, 385, 178, 179, 180, 287, 365, 94, 0, 21, 0, 21, 21, 176, 329, 166, 177, 0, 166, 178, 179, 180, 44, 44, 44, 44, 44, 44, 0, 44, 44, 44, 166, 166, 0, 44, 0, 166, 44, 44, 44, 44, 0, 167, 168, 44, 44, 0, 44, 44, 44, 44, 44, 0, 0, 274, 0, 44, 44, 44, 44, 44, 44, 176, 0, 0, 177, 166, 44, 178, 179, 180, 0, 0, 0, 0, 0, 44, 194, 44, 44, 194, 194, 194, 0, 194, 173, 194, 194, 173, 194, 164, 0, 387, 0, 0, 0, 165, 166, 167, 168, 0, 0, 173, 173, 0, 0, 0, 173, 194, 0, 0, 0, 169, 171, 172, 173, 174, 175, 176, 0, 0, 177, 0, 0, 178, 179, 180, 157, 158, 159, 160, 0, 0, 0, 161, 194, 0, 173, 195, 0, 0, 195, 195, 195, 0, 195, 144, 195, 195, 144, 195, 0, 0, 164, 0, 162, 163, 0, 0, 165, 166, 167, 168, 144, 144, 0, 0, 0, 144, 195, 194, 0, 0, 0, 0, 169, 171, 172, 173, 174, 175, 176, 0, 0, 177, 0, 0, 178, 179, 180, 0, 0, 0, 0, 0, 4, 5, 6, 144, 7, 8, 55, 167, 168, 65, 67, 53, 0, 60, 0, 68, 64, 0, 63, 0, 371, 372, 0, 0, 0, 378, 175, 176, 0, 0, 177, 9, 62, 178, 179, 180, 195, 66, 4, 5, 6, 386, 7, 8, 0, 389, 0, 0, 0, 0, 166, 166, 166, 166, 0, 0, 0, 166, 0, 166, 0, 0, 0, 0, 61, 166, 166, 166, 166, 9, 0, 0, 0, 0, 0, 0, 0, 0, 166, 166, 0, 166, 166, 166, 166, 166, 166, 166, 0, 0, 166, 0, 0, 166, 166, 166, 26, 0, 0, 56, 0, 0, 0, 0, 0, 0, 194, 194, 194, 194, 194, 0, 194, 194, 194, 0, 0, 0, 194, 0, 0, 173, 173, 173, 173, 0, 0, 0, 173, 194, 173, 194, 194, 194, 194, 194, 173, 173, 173, 173, 194, 194, 194, 194, 194, 194, 0, 0, 0, 173, 173, 194, 173, 173, 173, 173, 173, 173, 173, 0, 194, 173, 194, 194, 173, 173, 173, 195, 195, 195, 195, 195, 0, 195, 195, 195, 0, 0, 0, 195, 0, 0, 144, 144, 144, 144, 0, 0, 0, 144, 195, 144, 195, 195, 195, 195, 195, 144, 144, 144, 144, 195, 195, 195, 195, 195, 195, 0, 0, 0, 144, 144, 195, 144, 144, 144, 144, 144, 144, 144, 0, 195, 144, 195, 195, 144, 144, 144, 0, 25, 27, 28, 29, 30, 31, 170, 32, 33, 34, 0, 0, 0, 35, 0, 0, 36, 37, 38, 39, 0, 0, 0, 40, 41, 0, 42, 43, 44, 45, 46, 0, 0, 0, 0, 47, 48, 49, 50, 51, 52, 0, 0, 0, 44, 0, 54, 44, 44, 44, 0, 44, 0, 44, 44, 57, 44, 58, 59, 0, 0, 0, 0, 360, 361, 362, 0, 364, 0, 0, 44, 0, 0, 0, 0, 44, 0, 0, 78, 0, 0, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 380, 78, 78, 0, 0, 0, 0, 382, 44, 0, 55, 384, 0, 65, 67, 53, 0, 60, 0, 68, 64, 0, 63, 0, 392, 393, 0, 99, 99, 0, 0, 0, 0, 0, 0, 0, 78, 0, 0, 112, 44, 66, 0, 44, 0, 120, 99, 128, 0, 0, 55, 134, 99, 65, 67, 53, 0, 60, 0, 68, 64, 0, 63, 0, 99, 99, 99, 99, 61, 165, 166, 167, 168, 0, 0, 0, 0, 0, 0, 0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 106, 175, 176, 106, 0, 177, 0, 0, 178, 179, 180, 26, 0, 0, 56, 0, 0, 106, 106, 61, 0, 0, 106, 0, 0, 55, 120, 0, 65, 67, 53, 0, 60, 0, 68, 64, 0, 63, 0, 0, 0, 164, 0, 0, 0, 0, 0, 165, 166, 167, 168, 26, 106, 0, 56, 0, 66, 0, 0, 0, 0, 0, 0, 169, 171, 172, 173, 174, 175, 176, 0, 0, 177, 0, 0, 178, 179, 180, 0, 0, 0, 0, 0, 61, 44, 44, 44, 44, 44, 44, 256, 44, 44, 44, 0, 0, 0, 44, 0, 0, 44, 44, 44, 44, 0, 0, 0, 44, 44, 0, 44, 44, 44, 44, 44, 26, 0, 288, 56, 44, 44, 44, 44, 44, 44, 0, 78, 78, 78, 78, 44, 0, 0, 78, 0, 0, 0, 0, 0, 44, 0, 44, 44, 0, 0, 119, 28, 29, 30, 31, 97, 32, 33, 34, 78, 78, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 42, 43, 44, 45, 46, 0, 0, 0, 0, 47, 48, 49, 50, 51, 52, 27, 28, 29, 30, 31, 54, 32, 33, 34, 0, 0, 0, 35, 0, 57, 0, 58, 59, 0, 309, 0, 0, 0, 41, 170, 42, 43, 44, 45, 46, 0, 0, 0, 0, 47, 48, 49, 50, 51, 52, 0, 0, 0, 0, 0, 54, 106, 106, 106, 106, 0, 0, 0, 106, 57, 106, 58, 59, 0, 0, 0, 106, 106, 0, 125, 28, 29, 30, 31, 0, 32, 33, 34, 0, 106, 106, 35, 106, 106, 106, 106, 106, 106, 0, 0, 0, 0, 41, 0, 42, 43, 44, 45, 46, 0, 0, 0, 0, 47, 48, 49, 50, 51, 52, 0, 0, 0, 55, 0, 54, 65, 67, 53, 0, 60, 0, 68, 64, 57, 63, 58, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 0, 0, 0, 0, 66, 0, 0, 0, 165, 166, 167, 168, 0, 55, 0, 0, 65, 67, 53, 0, 60, 145, 68, 64, 0, 63, 172, 173, 174, 175, 176, 61, 0, 177, 0, 0, 178, 179, 180, 0, 0, 0, 0, 0, 66, 0, 0, 0, 165, 166, 167, 168, 0, 55, 0, 0, 65, 67, 53, 0, 60, 0, 68, 64, 0, 63, 56, 173, 174, 175, 176, 61, 0, 177, 0, 0, 178, 179, 180, 0, 0, 0, 0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 0, 55, 0, 0, 65, 67, 53, 0, 60, 211, 68, 64, 0, 63, 56, 0, 164, 0, 0, 61, 0, 147, 165, 166, 167, 168, 0, 0, 0, 0, 0, 0, 66, 0, 0, 0, 0, 0, 169, 171, 172, 173, 174, 175, 176, 0, 0, 177, 0, 0, 178, 179, 180, 0, 56, 165, 166, 167, 168, 61, 0, 55, 0, 0, 65, 67, 53, 0, 60, 222, 68, 64, 0, 63, 0, 174, 175, 176, 0, 0, 177, 0, 0, 178, 179, 180, 0, 0, 0, 0, 0, 0, 66, 165, 56, 167, 168, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 29, 30, 31, 0, 32, 33, 34, 175, 176, 0, 35, 177, 61, 0, 178, 179, 180, 0, 0, 0, 0, 41, 0, 42, 43, 44, 45, 46, 0, 0, 0, 0, 47, 48, 49, 50, 51, 52, 27, 28, 29, 30, 31, 54, 32, 33, 34, 56, 0, 0, 35, 0, 57, 0, 58, 59, 0, 0, 0, 0, 0, 41, 0, 42, 43, 44, 45, 46, 0, 0, 0, 0, 47, 48, 49, 50, 51, 52, 27, 28, 29, 30, 31, 54, 32, 33, 34, 0, 0, 0, 35, 0, 57, 0, 58, 59, 0, 0, 0, 0, 0, 41, 0, 42, 43, 44, 45, 46, 0, 0, 0, 0, 47, 48, 49, 50, 51, 52, 27, 28, 29, 30, 31, 54, 32, 33, 34, 0, 0, 0, 35, 0, 57, 0, 58, 59, 0, 0, 0, 0, 0, 41, 0, 42, 43, 44, 45, 46, 0, 0, 0, 0, 47, 48, 49, 50, 51, 52, 0, 0, 0, 55, 0, 54, 65, 67, 53, 0, 60, 259, 68, 64, 57, 63, 58, 59, 0, 0, 27, 28, 29, 30, 31, 0, 32, 33, 34, 0, 0, 0, 35, 0, 66, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 42, 43, 44, 45, 46, 0, 0, 0, 0, 47, 48, 49, 50, 51, 52, 0, 61, 0, 55, 0, 54, 65, 67, 53, 0, 60, 267, 68, 64, 57, 63, 58, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 0, 56, 0, 0, 0, 0, 0, 108, 0, 0, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108, 108, 61, 55, 0, 108, 65, 67, 53, 0, 60, 0, 68, 64, 0, 63, 0, 0, 0, 0, 0, 165, 166, 167, 168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 108, 0, 56, 171, 172, 173, 174, 175, 176, 0, 0, 177, 0, 0, 178, 179, 180, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 0, 55, 0, 0, 65, 67, 53, 0, 60, 300, 68, 64, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 0, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 29, 30, 31, 0, 32, 33, 34, 0, 0, 0, 35, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 42, 43, 44, 45, 46, 0, 0, 0, 0, 47, 48, 49, 50, 51, 52, 74, 0, 0, 74, 0, 54, 0, 0, 56, 0, 0, 0, 0, 0, 57, 0, 58, 59, 74, 0, 27, 28, 29, 30, 31, 0, 32, 33, 34, 0, 55, 0, 35, 65, 67, 53, 0, 60, 302, 68, 64, 0, 63, 41, 0, 42, 43, 44, 45, 46, 0, 0, 74, 0, 47, 48, 49, 50, 51, 52, 0, 66, 0, 0, 0, 54, 108, 108, 108, 108, 0, 0, 0, 108, 57, 108, 58, 59, 25, 27, 28, 29, 30, 31, 0, 32, 33, 34, 61, 0, 0, 35, 0, 0, 108, 108, 0, 108, 108, 108, 108, 108, 41, 0, 42, 43, 44, 45, 46, 0, 0, 0, 0, 47, 48, 49, 50, 51, 52, 0, 0, 0, 55, 56, 54, 65, 67, 53, 0, 60, 311, 68, 64, 57, 63, 58, 59, 0, 0, 27, 28, 29, 30, 31, 0, 32, 33, 34, 0, 0, 0, 35, 0, 66, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 42, 43, 44, 45, 46, 0, 0, 0, 0, 47, 48, 49, 50, 51, 52, 0, 61, 0, 55, 0, 54, 65, 67, 53, 0, 60, 0, 68, 64, 57, 63, 58, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 0, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 74, 74, 74, 0, 0, 0, 74, 0, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 29, 30, 31, 74, 32, 33, 34, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 41, 0, 42, 43, 44, 45, 46, 0, 183, 0, 0, 47, 48, 49, 50, 51, 52, 0, 0, 0, 0, 0, 54, 0, 0, 183, 183, 0, 0, 0, 183, 57, 0, 58, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 29, 30, 31, 0, 32, 33, 34, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 42, 43, 44, 45, 46, 162, 0, 0, 162, 47, 48, 49, 50, 51, 52, 0, 0, 0, 0, 0, 54, 0, 162, 162, 0, 0, 0, 162, 0, 57, 0, 58, 59, 0, 0, 27, 28, 29, 30, 31, 0, 32, 33, 34, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 41, 0, 42, 43, 44, 45, 46, 0, 0, 0, 0, 47, 48, 49, 50, 51, 52, 103, 0, 0, 170, 0, 54, 0, 0, 113, 0, 0, 0, 118, 0, 57, 127, 58, 59, 132, 0, 0, 0, 140, 141, 142, 143, 144, 0, 0, 0, 149, 150, 182, 0, 0, 182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 182, 182, 0, 0, 0, 182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 183, 183, 183, 183, 0, 0, 0, 183, 149, 183, 0, 149, 0, 0, 182, 183, 183, 183, 183, 0, 0, 0, 0, 0, 0, 149, 149, 0, 183, 183, 149, 183, 183, 183, 183, 183, 183, 183, 0, 0, 183, 0, 0, 183, 183, 183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 149, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 269, 0, 0, 162, 162, 162, 162, 0, 144, 0, 162, 144, 162, 0, 0, 0, 0, 0, 162, 162, 162, 162, 0, 0, 0, 144, 144, 0, 0, 0, 144, 162, 162, 0, 162, 162, 162, 162, 162, 162, 162, 0, 0, 162, 0, 0, 162, 162, 162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 147, 0, 144, 147, 0, 164, 0, 0, 0, 0, 0, 165, 166, 167, 168, 0, 0, 147, 147, 0, 0, 0, 147, 0, 0, 0, 0, 331, 171, 172, 173, 174, 175, 176, 0, 0, 177, 0, 0, 178, 179, 180, 0, 0, 0, 0, 0, 182, 182, 182, 182, 0, 147, 0, 182, 145, 182, 0, 145, 0, 347, 0, 182, 182, 182, 182, 0, 0, 0, 0, 0, 0, 145, 145, 0, 182, 182, 145, 182, 182, 182, 182, 182, 182, 182, 0, 0, 182, 0, 0, 182, 182, 182, 149, 149, 149, 149, 0, 0, 0, 149, 155, 149, 0, 155, 0, 0, 145, 149, 149, 149, 149, 0, 0, 0, 0, 0, 0, 155, 155, 0, 149, 149, 155, 149, 149, 149, 149, 149, 149, 149, 0, 0, 149, 0, 0, 149, 149, 149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 173, 0, 0, 173, 0, 155, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 173, 173, 0, 0, 0, 173, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 144, 144, 144, 0, 0, 0, 144, 0, 144, 0, 0, 0, 0, 0, 144, 144, 144, 144, 173, 0, 0, 0, 0, 176, 0, 0, 176, 144, 144, 0, 144, 144, 144, 144, 144, 144, 144, 0, 0, 144, 176, 176, 144, 144, 144, 176, 0, 0, 0, 147, 147, 147, 147, 0, 0, 0, 147, 0, 147, 0, 0, 0, 0, 0, 147, 147, 147, 147, 0, 0, 0, 0, 0, 143, 0, 176, 143, 147, 147, 0, 147, 147, 147, 147, 147, 147, 147, 0, 0, 147, 143, 143, 147, 147, 147, 143, 0, 0, 0, 0, 0, 0, 0, 0, 145, 145, 145, 145, 0, 0, 0, 145, 0, 145, 0, 0, 0, 0, 0, 145, 145, 145, 145, 0, 0, 143, 0, 0, 0, 0, 0, 0, 145, 145, 0, 145, 145, 145, 145, 145, 145, 145, 0, 0, 145, 0, 0, 145, 145, 145, 155, 155, 155, 155, 0, 76, 0, 155, 76, 155, 0, 0, 0, 0, 0, 155, 155, 155, 155, 0, 0, 0, 76, 76, 0, 0, 0, 76, 155, 155, 0, 155, 155, 155, 155, 155, 155, 155, 0, 0, 155, 0, 0, 155, 155, 155, 0, 173, 173, 173, 173, 0, 0, 0, 173, 0, 173, 76, 0, 0, 0, 0, 173, 173, 173, 173, 0, 0, 0, 0, 0, 66, 0, 0, 66, 173, 173, 0, 173, 173, 173, 173, 173, 173, 173, 0, 0, 173, 66, 66, 173, 173, 173, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176, 176, 176, 176, 0, 0, 0, 176, 0, 176, 0, 0, 0, 0, 0, 176, 176, 176, 176, 66, 0, 0, 0, 0, 142, 0, 0, 142, 176, 176, 0, 176, 176, 176, 176, 176, 176, 176, 0, 0, 176, 142, 142, 176, 176, 176, 142, 0, 0, 0, 143, 143, 143, 143, 0, 0, 0, 143, 0, 143, 0, 0, 0, 0, 0, 143, 143, 143, 143, 0, 0, 0, 0, 0, 82, 0, 142, 82, 143, 143, 0, 143, 143, 143, 143, 143, 143, 143, 0, 0, 143, 82, 82, 143, 143, 143, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 160, 0, 0, 160, 0, 76, 76, 76, 76, 161, 0, 0, 76, 0, 76, 0, 0, 160, 160, 0, 76, 76, 76, 76, 0, 0, 161, 161, 0, 0, 0, 161, 0, 76, 76, 0, 76, 76, 76, 76, 76, 76, 76, 0, 0, 76, 0, 0, 76, 76, 76, 0, 160, 0, 0, 0, 0, 0, 0, 0, 0, 161, 0, 0, 0, 0, 0, 102, 0, 0, 102, 66, 66, 66, 66, 79, 0, 0, 66, 0, 66, 0, 0, 0, 102, 102, 66, 66, 66, 66, 0, 0, 79, 79, 0, 0, 0, 79, 0, 66, 66, 0, 66, 66, 66, 66, 66, 66, 66, 0, 0, 66, 0, 0, 66, 66, 66, 0, 0, 102, 0, 0, 0, 0, 0, 0, 0, 79, 142, 142, 142, 142, 0, 0, 0, 142, 121, 142, 0, 121, 0, 0, 0, 142, 142, 142, 142, 0, 0, 0, 0, 0, 0, 121, 121, 0, 142, 142, 121, 142, 142, 142, 142, 142, 142, 142, 0, 0, 142, 0, 0, 142, 142, 142, 0, 0, 0, 0, 82, 82, 82, 82, 0, 122, 0, 82, 122, 82, 121, 0, 0, 0, 0, 82, 82, 82, 82, 0, 0, 0, 122, 122, 0, 0, 0, 122, 82, 82, 0, 82, 82, 82, 82, 82, 82, 82, 0, 0, 82, 0, 0, 82, 82, 82, 0, 0, 0, 0, 0, 0, 0, 160, 160, 160, 160, 122, 0, 0, 160, 0, 161, 161, 161, 161, 0, 117, 0, 161, 117, 161, 0, 0, 0, 0, 0, 161, 161, 161, 161, 160, 160, 0, 117, 117, 0, 0, 0, 117, 161, 161, 0, 161, 161, 161, 161, 161, 161, 161, 0, 0, 161, 0, 0, 161, 161, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 117, 102, 102, 102, 102, 0, 0, 0, 102, 79, 79, 79, 79, 0, 118, 0, 79, 118, 79, 0, 0, 0, 0, 0, 79, 79, 79, 79, 0, 102, 102, 118, 118, 0, 0, 0, 118, 79, 79, 0, 79, 79, 79, 79, 79, 79, 79, 0, 0, 79, 0, 0, 79, 79, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 0, 0, 0, 121, 121, 121, 121, 0, 139, 0, 121, 139, 121, 0, 0, 0, 0, 0, 121, 121, 121, 121, 0, 0, 0, 139, 139, 0, 0, 0, 139, 121, 121, 0, 121, 121, 121, 121, 121, 121, 121, 0, 0, 121, 0, 0, 0, 0, 0, 0, 122, 122, 122, 122, 0, 115, 0, 122, 115, 122, 139, 0, 0, 0, 0, 122, 122, 122, 122, 0, 0, 0, 115, 115, 0, 0, 0, 115, 122, 122, 0, 122, 122, 122, 122, 122, 122, 122, 0, 0, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 116, 0, 0, 0, 115, 0, 0, 0, 0, 117, 117, 117, 117, 0, 116, 116, 117, 0, 117, 116, 0, 0, 0, 0, 117, 117, 117, 117, 0, 0, 0, 0, 0, 0, 0, 0, 114, 117, 117, 114, 117, 117, 117, 117, 117, 117, 117, 0, 0, 116, 0, 0, 0, 114, 114, 0, 0, 0, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 118, 118, 118, 0, 103, 0, 118, 103, 118, 0, 0, 0, 114, 0, 118, 118, 118, 118, 0, 0, 0, 103, 103, 0, 0, 0, 103, 118, 118, 0, 118, 118, 118, 118, 118, 118, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 0, 0, 104, 0, 0, 0, 0, 103, 0, 0, 0, 139, 139, 139, 139, 0, 104, 104, 139, 0, 139, 104, 0, 0, 0, 0, 139, 139, 139, 139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139, 139, 0, 139, 139, 139, 139, 139, 139, 139, 0, 0, 104, 0, 0, 0, 0, 0, 0, 115, 115, 115, 115, 0, 105, 0, 115, 105, 115, 0, 0, 0, 0, 0, 115, 115, 115, 115, 0, 0, 0, 105, 105, 0, 0, 0, 105, 115, 115, 0, 115, 115, 115, 115, 115, 115, 115, 0, 0, 0, 0, 0, 0, 0, 116, 116, 116, 116, 0, 0, 0, 116, 165, 116, 0, 165, 105, 0, 0, 116, 116, 116, 116, 0, 0, 0, 0, 0, 0, 165, 165, 0, 116, 116, 165, 116, 116, 116, 116, 116, 116, 116, 0, 114, 114, 114, 114, 0, 164, 0, 114, 164, 114, 0, 0, 0, 0, 0, 114, 114, 114, 114, 0, 0, 165, 164, 164, 0, 0, 0, 164, 114, 114, 0, 114, 114, 114, 114, 114, 114, 114, 0, 0, 0, 0, 0, 0, 103, 103, 103, 103, 0, 128, 0, 103, 128, 103, 0, 0, 0, 164, 0, 103, 103, 103, 103, 0, 0, 0, 128, 128, 0, 0, 0, 128, 103, 103, 0, 103, 103, 103, 103, 103, 103, 103, 0, 0, 0, 0, 0, 0, 104, 104, 104, 104, 0, 141, 0, 104, 141, 104, 0, 0, 0, 128, 0, 104, 104, 104, 104, 0, 0, 0, 141, 141, 0, 0, 0, 141, 104, 104, 0, 104, 104, 104, 104, 104, 104, 0, 0, 0, 0, 0, 138, 0, 0, 138, 0, 0, 0, 0, 0, 0, 107, 0, 0, 107, 0, 141, 0, 138, 138, 0, 0, 0, 105, 105, 105, 105, 0, 107, 107, 105, 0, 105, 107, 0, 0, 0, 0, 105, 105, 0, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 105, 138, 105, 105, 105, 105, 105, 105, 0, 0, 0, 107, 0, 0, 109, 0, 0, 109, 0, 165, 165, 165, 165, 0, 110, 0, 165, 110, 165, 0, 0, 109, 109, 0, 165, 165, 109, 0, 0, 0, 0, 110, 110, 0, 0, 0, 110, 165, 165, 0, 165, 165, 165, 165, 165, 164, 164, 164, 164, 0, 112, 0, 164, 112, 164, 0, 109, 0, 0, 0, 164, 164, 0, 0, 0, 0, 110, 112, 112, 0, 0, 0, 112, 164, 164, 0, 164, 164, 164, 164, 164, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 128, 128, 0, 111, 0, 128, 111, 128, 0, 0, 0, 112, 0, 128, 128, 0, 0, 0, 0, 0, 111, 111, 0, 0, 0, 111, 128, 128, 0, 128, 128, 128, 128, 128, 0, 77, 0, 0, 77, 0, 0, 0, 141, 141, 141, 141, 0, 0, 0, 141, 0, 141, 77, 77, 0, 111, 0, 141, 141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141, 141, 0, 141, 141, 141, 141, 141, 0, 138, 138, 138, 138, 0, 0, 0, 138, 77, 0, 107, 107, 107, 107, 0, 0, 0, 107, 0, 107, 0, 0, 0, 0, 0, 0, 107, 0, 138, 138, 0, 138, 0, 0, 0, 0, 0, 0, 107, 107, 0, 107, 107, 107, 107, 107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 109, 109, 109, 0, 0, 0, 109, 0, 109, 110, 110, 110, 110, 0, 0, 0, 110, 0, 110, 0, 0, 0, 0, 0, 0, 0, 0, 109, 109, 0, 109, 109, 109, 109, 109, 0, 0, 110, 110, 0, 110, 110, 110, 110, 0, 112, 112, 112, 112, 0, 0, 0, 112, 0, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 112, 0, 112, 112, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 111, 111, 111, 0, 0, 0, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 111, 0, 111, 77, 77, 77, 77, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 77};

static _INT16 yyrindex[395LL] = {0, 0, 0, 247, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 274, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 455, 0, 0, 2367, 2469, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 0, 3, 943, 2515, 2603, 2653, 0, 0, 2708, 2754, 0, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, -33, 0, 0, -33, 0, 0, 0, 0, 0, 2469, 0, 0, 3919, 0, -102, 0, 0, 0, 0, 0, 0, 0, 3216, 0, 0, 359, 0, 3955, 526, 587, 2276, 0, 0, 0, 2801, 0, 3999, 2603, 0, 0, 2469, 4043, 0, 0, 0, 0, 2858, 0, 3225, 3461, 3527, 3588, 3352, 3399, 2908, 0, 0, 0, 3635, 3680, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2990, 0, 0, -28, 0, -28, 917, 0, 359, 0, 0, 295, 379, 0, 0, 0, 0, 370, 0, 0, 0, 0, 390, 0, 0, 3291, 0, 0, 0, 0, 0, 0, 0, 3056, 0, 0, 3113, 0, 0, 14, 35, 0, 55, 91, 117, 1991, 0, 4235, 4090, 1826, 3807, 3871, 3283, 0, -22, 4191, 4155, 4145, 1048, 3719, 3763, 0, 0, 0, 0, 0, 3163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4267, -10, 0, 375, 0, 0, 0, 0, 0, 2469, 0, 136, 0, 0, 0, 0, 400, 0, 0, 0, 0, 139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 359, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 396, 0, 0, 0, 0, 0, 0, 4080, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 119, 179, 179, 0, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 415, 119, 917, 0, 0, 119, 0, 0, 0, 0, 0, 0, 0, 0, 179, 0};

extern _INT32 Perl_yyerror(_INT8 *);

static _INT16 yylen[198LL] = {2, 2, 4, 0, 0, 4, 0, 0, 2, 2, 2, 1, 2, 3, 1, 1, 3, 3, 3, 3, 3, 0, 2, 6, 7, 7, 0, 2, 8, 8, 10, 9, 8, 11, 3, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 4, 1, 0, 6, 6, 0, 0, 0, 1, 0, 1, 0, 2, 1, 2, 1, 1, 1, 3, 2, 0, 7, 3, 3, 1, 2, 3, 1, 3, 5, 6, 3, 3, 5, 2, 4, 0, 5, 1, 1, 5, 4, 5, 4, 5, 6, 5, 4, 5, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 4, 3, 5, 2, 2, 4, 5, 4, 5, 1, 1, 1, 1, 5, 2, 1, 2, 3, 2, 1, 1, 1, 1, 1, 1, 6, 5, 4, 5, 1, 1, 3, 4, 3, 1, 2, 2, 1, 2, 2, 2, 1, 3, 1, 3, 4, 4, 6, 1, 1, 3, 2, 3, 2, 1, 1, 1, 0, 1, 0, 1, 2, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1};

extern void Perl_newPROG(struct op *);

extern struct op * Perl_block_end(_INT32, struct op *);

extern _UINT32 PL_copline;

extern _INT32 Perl_block_start(_INT32);

extern _INT32 PL_expect;

extern struct op * Perl_append_list(_INT32, struct listop *, struct listop *);

extern _INT32 PL_pad_reset_pending;

extern _UINT32 PL_hints;

extern struct op * Perl_newSTATEOP(_INT32, _INT8 *, struct op *);

extern struct op * Perl_newOP(_INT32, _INT32);

extern struct op * Perl_newLOGOP(_INT32, _INT32, struct op *, struct op *);

extern struct op * Perl_newLOOPOP(_INT32, _INT32, struct op *, struct op *);

extern struct op * Perl_scalar(struct op *);

extern struct op * Perl_newFOROP(_INT32, _INT8 *, _UINT32, struct op *, struct op *, struct op *, struct op *);

extern struct op * Perl_scope(struct op *);

extern struct op * Perl_newCONDOP(_INT32, struct op *, struct op *, struct op *);

extern struct op * Perl_newWHILEOP(_INT32, _INT32, struct loop *, _INT32, struct op *, struct op *, struct op *);

extern struct op * Perl_mod(struct op *, _INT32);

extern struct op * Perl_append_elem(_INT32, struct op *, struct op *);

extern _INT8 * Perl_savepv(const _INT8 *);

extern _INT8 * Perl_scan_num(_INT8 *, union anonymous_w2c_5 *);

extern struct op * Perl_invert(struct op *);

extern _UINT32 Perl_intro_my(void);

extern void Perl_newFORM(_INT32, struct op *, struct op *);

extern void Perl_newMYSUB(_INT32, struct op *, struct op *, struct op *, struct op *);

extern struct cv * Perl_newATTRSUB(_INT32, struct op *, struct op *, struct op *, struct op *);

extern _INT32 Perl_start_subparse(_INT32, _UINT32);

extern _INT8 * Perl_sv_2pv_flags(struct sv *, _UINT64 *, _INT32);

static _INT32 anon1;

static _INT32 anon3;

static _INT32 anon4;

static _INT32 anon5;

static _INT32 anon7;

extern struct cv * PL_compcv;

extern void Perl_package(struct op *);

extern void Perl_utilize(_INT32, _INT32, struct op *, struct op *, struct op *);

extern struct op * Perl_convert(_INT32, _INT32, struct op *);

extern struct op * Perl_prepend_elem(_INT32, struct op *, struct op *);

extern struct op * Perl_newGVREF(_INT32, struct op *);

extern struct op * Perl_newUNOP(_INT32, _INT32, struct op *);

extern struct op * Perl_newANONATTRSUB(_INT32, struct op *, struct op *, struct op *);

extern struct op * Perl_newBINOP(_INT32, _INT32, struct op *, struct op *);

extern struct op * Perl_oopsAV(struct op *);

extern struct op * Perl_ref(struct op *, _INT32);

extern struct op * Perl_newAVREF(struct op *);

extern struct op * Perl_oopsHV(struct op *);

extern struct op * Perl_jmaybe(struct op *);

extern struct op * Perl_newHVREF(struct op *);

extern struct op * Perl_newCVREF(_INT32, struct op *);

extern struct op * Perl_newASSIGNOP(_INT32, struct op *, _INT32, struct op *);

extern struct op * Perl_newRANGE(_INT32, struct op *, struct op *);

extern struct op * Perl_bind_match(_INT32, struct op *, struct op *);

extern struct op * Perl_newANONLIST(struct op *);

extern struct op * Perl_newANONHASH(struct op *);

extern struct op * Perl_dofile(struct op *);

extern void Perl_deprecate_old(_INT8 *);

extern struct op * Perl_localize(struct op *, _INT32);

extern struct op * Perl_sawparens(struct op *);

extern struct op * Perl_newNULLLIST(void);

extern struct op * Perl_newSLICEOP(_INT32, struct op *, struct op *);

extern struct op * Perl_newLISTOP(_INT32, _INT32, struct op *, struct op *);

extern struct op * Perl_list(struct op *);

extern struct op * Perl_newLOOPEX(_INT32, struct op *);

extern struct op * Perl_newSVOP(_INT32, _INT32, struct sv *);

extern struct sv * Perl_newSViv(_INT64);

extern struct op * Perl_pmruntime(struct op *, struct op *, struct op *);

extern struct op * Perl_my_attrs(struct op *, struct op *);

extern _INT32 PL_in_my;

extern struct op * Perl_my(struct op *);

extern struct op * Perl_newSVREF(struct op *);

static _INT16 yylhs[198LL] = {-1, 0, 9, 7, 6, 10, 8, 11, 11, 11, 12, 12, 12, 12, 25, 25, 25, 25, 25, 25, 25, 15, 15, 15, 14, 14, 43, 43, 13, 13, 13, 13, 13, 13, 13, 27, 27, 28, 28, 29, 30, 31, 32, 33, 54, 54, 1, 1, 1, 1, 1, 2, 39, 39, 47, 55, 3, 4, 5, 40, 41, 41, 45, 45, 45, 46, 46, 42, 42, 56, 56, 58, 57, 16, 16, 16, 26, 26, 26, 37, 37, 37, 37, 37, 37, 37, 37, 59, 37, 38, 38, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 53, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 48, 48, 49, 49, 49, 49, 49, 34, 34, 35, 35, 35, 44, 24, 19, 20, 21, 22, 23, 36, 36, 36, 36};

static _INT16 yygindex[60LL] = {0, 0, 0, 196, 425, 0, 0, -2, 0, 37, 634, -94, 0, 0, 0, -323, -15, 2445, 0, 999, 414, 417, 0, 0, 0, 463, -43, 0, 0, 321, -198, 103, 147, 280, -91, -185, 1, 0, 0, 0, 464, -44, 222, 338, 0, -179, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

static _INT16 yydgoto[60LL] = {1, 10, 11, 20, 104, 19, 2, 95, 370, 98, 359, 3, 12, 13, 70, 375, 285, 72, 73, 74, 75, 76, 77, 78, 79, 291, 81, 292, 281, 283, 286, 294, 282, 284, 122, 214, 100, 82, 257, 89, 91, 194, 327, 156, 289, 271, 225, 14, 83, 137, 84, 85, 86, 87, 15, 16, 17, 18, 93, 278};

extern void Perl_safesysfree(void *);

